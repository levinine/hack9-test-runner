{
	"info": {
		"_postman_id": "4792d3ec-63d9-46da-8202-81cb798e566c",
		"name": "Hack9 functional tests - invoice copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "price",
			"item": [
				{
					"name": "Get call price for the given phone number with correct time in the past Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed45f58a-bb17-4ec9-bddb-19f3466af5b5",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Test price prefix\", function () {",
									"    pm.expect(data.prefix.toString()).to.be.eql(pm.variables.get(\"prefixCallResult\").toString());",
									"});",
									"",
									"pm.test(\"Test price\", function () {",
									"    pm.expect(data.price.toNumber().toFixed(2)).to.be.eql(pm.variables.get(\"priceCallResult\").toFixed(2));",
									"});",
									"",
									"pm.test(\"Test the date price is valid from\", function () {",
									"    FormatDateActual = new Date(data.from).getTime(); ",
									"    FormatDateExpected = new Date(pm.variables.get(\"fromCallResult\")).getTime(); ",
									"    pm.expect(FormatDateActual).to.be.eql(FormatDateExpected);",
									"    ",
									"    //or following, but that would depend on the date format",
									"    //pm.expect(data.from.toString()).to.be.eql(pm.variables.get(\"fromCallResult\").toString());",
									"",
									"});",
									"",
									"pm.test(\"Test price initial\", function () {",
									"    pm.expect(data.initial.toString()).to.be.eql(pm.variables.get(\"initialCallResult\").toString());",
									"});",
									"",
									"pm.test(\"Test price increment\", function () {",
									"    pm.expect(data.increment.toString()).to.be.eql(pm.variables.get(\"incrementCallResult\").toString());",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/switch/price?number={{numberInput}}&time={{startDateInput}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"switch",
								"price"
							],
							"query": [
								{
									"key": "number",
									"value": "{{numberInput}}"
								},
								{
									"key": "time",
									"value": "{{startDateInput}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "call",
			"item": [
				{
					"name": "Register call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d274676-6bb6-412d-92d1-b7f9db0f2ae9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f09918af-4823-44a1-b82d-60e46471cf1f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test calling number from result body\", function () {",
									"    pm.expect(data.calling.toString()).to.be.eql(pm.variables.get(\"callCalling\").toString());",
									"});",
									"",
									"pm.test(\"Test called number from result body\", function () {",
									"    pm.expect(data.called.toString()).to.be.eql(pm.variables.get(\"callCalled\").toString());",
									"});",
									"",
									"pm.test(\"Test start of the call from result body\", function () {",
									"    FormatDateActual = new Date(data.start).getTime(); ",
									"    FormatDateExpected = new Date(pm.variables.get(\"callStart\")).getTime(); ",
									"    pm.expect(FormatDateActual).to.be.eql(FormatDateExpected);",
									"    ",
									"    //or following, but that would depend on the date format",
									"    //pm.expect(data.start.toString()).to.be.eql(pm.variables.get(\"callStart\").toString());",
									"});",
									"",
									"pm.test(\"Test call duration from result body\", function () {",
									"    pm.expect(data.duration.toString()).to.be.eql(pm.variables.get(\"callDuration\").toString());",
									"});",
									"",
									"pm.test(\"Test rounded from result body\", function () {",
									"    pm.expect(data.rounded.toString()).to.be.eql(pm.variables.get(\"callRounded\").toString());",
									"});",
									"",
									"pm.test(\"Test call price from result body\", function () {",
									"    pm.expect(data.price.toNumber().toFixed(2)).to.be.eql(pm.variables.get(\"callPrice\").toFixed(2).toString());",
									"});",
									"",
									"pm.test(\"Test call cost from result body\", function () {",
									"    pm.expect(data.cost.toNumber().toFixed(2)).to.be.eql(pm.variables.get(\"callCost\").toFixed(2).toString());",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"calling\" : \"{{callCalling}}\",\n\t\"called\" : \"{{callCalled}}\",\n\t\"start\" : \"{{callStart}}\",\n\t\"duration\" : \"{{callDuration}}\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/switch/call",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"switch",
								"call"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "listing",
			"item": [
				{
					"name": "Get listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f139c0-aba1-46aa-87eb-1f6f277381b4",
								"exec": [
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    var data = JSON.parse(responseBody);",
									"    tests[\"Check number of calls in listing: \"] = data.calls.length === pm.variables.get(\"numberOfCalls\") ;",
									"    ",
									"    ",
									"    var numberOfCalls = pm.variables.get(\"numberOfCalls\");",
									"    ",
									"    //added matching of calls from listing response to calls in test data file to avoid possible problems with different sorting of calls in response",
									"",
									"        for (var ResponseCallNumber = 0; ResponseCallNumber < numberOfCalls; ResponseCallNumber++){",
									"        ",
									"            var callCalledResponseCallNumber=\"callCalled\"+ResponseCallNumber;",
									"            var callStartResponseCallNumber=\"callStart\"+ResponseCallNumber;",
									"            var callDurationResponseCallNumber=\"callDuration\"+ResponseCallNumber;",
									"            var callCostResponseCallNumber=\"callCost\"+ResponseCallNumber;",
									"",
									"            for (var TestFileCallNumber = 0; TestFileCallNumber<numberOfCalls; TestFileCallNumber++){",
									"                var callCostTestFileCallNumber=\"callCost\"+TestFileCallNumber;",
									"                var callCalledTestFileCallNumber=\"callCalled\"+TestFileCallNumber;",
									"                var callStartTestFileCallNumber=\"callStart\"+TestFileCallNumber;",
									"                var callDurationTestFileCallNumber=\"callDuration\"+TestFileCallNumber;",
									"",
									"",
									"                if ((data.calls[ResponseCallNumber].called.toString()===pm.variables.get(callCalledTestFileCallNumber).toString()) && (data.calls[ResponseCallNumber].start.toString()===pm.variables.get(callStartTestFileCallNumber).toString()) && (data.calls[ResponseCallNumber].duration.toString()===pm.variables.get(callDurationTestFileCallNumber).toString())) {",
									"                    ",
									"                    pm.test(\"Test call cost in the listing report\", function () {",
									"                        pm.expect(data.calls[ResponseCallNumber].cost.toNumber().toFixed(2)).to.eql(pm.variables.get(callCostTestFileCallNumber).toFixed(2).toString());",
									"                    });",
									"                    ",
									"                }",
									"            }    ",
									"                 ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/listing/{{callCalling}}?from={{callsFromDate}}&to={{callsToDate}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"listing",
								"{{callCalling}}"
							],
							"query": [
								{
									"key": "from",
									"value": "{{callsFromDate}}"
								},
								{
									"key": "to",
									"value": "{{callsToDate}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "reset",
			"item": [
				{
					"name": "Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec4d1fae-7173-440b-bc5c-6d9cc74f04ec",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reset"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invoice_request",
			"item": [
				{
					"name": "Invoice request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebaeefb9-abaf-4da8-9e74-f6105ec309ff",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function(){  }, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"start\": \"{{start}}\",\n\t\"end\": \"{{end}}\",\n\t\"callback\": \"{{callback_url}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/financial/invoice",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"financial",
								"invoice"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "report",
			"item": [
				{
					"name": "Get report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10808461-4713-4420-9d16-53e460154bc7",
								"exec": [
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    var data = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Check number of reports in listing: \" + data.invoices.length] = data.invoices.length.toString() === pm.variables.get(\"numberOfInvoices\").toString() ;",
									"    ",
									"    var numberOfInvoices = pm.variables.get(\"numberOfInvoices\");",
									"    ",
									"    //when number of invoices in report is 1, it is possible to check exact fields",
									"    //when number of invoices is more than 1, exact fields cannot be tested because the ordering is not defined. We don't want tests to fail due to different ordering of invoices. We don't know invoice_id so we can be sure that we are checking correct one. ",
									"    //Instead of checking exact fields we can test that expected values are available in json report, that should be enough for testing. ",
									"",
									"    ",
									"    if (numberOfInvoices === 1) {",
									"        pm.test(\"Test invoices in report\", function () {",
									"            pm.expect(data.invoices[0].sum.toNumber().toFixed(2)).to.eql(pm.variables.get(\"callCost0\").toFixed(2).toString());",
									"        });",
									"    }else{",
									"        var actual = [];",
									"        var expected = [];",
									"        for (var i = 0; i<numberOfInvoices; i++){",
									"            var callCosti=\"callCost\"+i;",
									"            ",
									"            actual[i]=data.invoices[i].sum.toNumber().toFixed(2);",
									"            expected[i] = pm.variables.get(callCosti).toFixed(2).toNumber().toString();",
									"          ",
									"        }",
									"            pm.test(\"Test invoices in report when there is more than one invoice in response\", function () {",
									"                for (var i = 0; i<numberOfInvoices; i++){",
									"                    pm.expect(actual).to.include(expected[i]);",
									"                }",
									"            });",
									"    }",
									"    ",
									"    pm.test(\"Test remaining in report\", function () {",
									"        pm.expect(data.remaining.toNumber().toFixed(2)).to.eql(pm.variables.get(\"invoiceRemaining\").toFixed(2).toString());",
									"    });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/financial/report/{{callCalling}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"financial",
								"report",
								"{{callCalling}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "Get invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3eb590d-a84b-4a86-8c6f-d1ea1f30b345",
								"exec": [
									"pm.sendRequest(pm.variables.get(\"base_url\") + \"/financial/report/\"+pm.variables.get(\"calling\"), function (err, response) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        console.log(response.json());",
									"        var data = response.json();",
									" ",
									"        pm.environment.set(\"invoice_id\", data.invoices[pm.variables.get(\"ordinarNumberOfInvoice\")].id);",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa266a59-649b-4377-b3fe-a64b840690db",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Test calling number from invoice\", function () {",
									"        pm.expect(data.calling.toString()).to.be.eql(pm.variables.get(\"calling\").toString());",
									"});",
									"",
									"//Separating cases when there is one and more invoices ",
									"//When tere are more than one invoice, matching them to the data from source data file to avoid possible fails in case different implementation uses different sorting ",
									"if (pm.variables.get(\"numberOfInvoices\") === 1) {",
									"    ",
									"    pm.test(\"Test the start date of the invoice\", function () {",
									"        FormatStartDateActual = new Date(data.start).getTime(); ",
									"        FormatStartDateExpected = new Date(pm.variables.get(\"expected_start0\")).getTime(); ",
									"        pm.expect(FormatStartDateActual).to.be.eql(FormatStartDateExpected);",
									"    });",
									"",
									"    pm.test(\"Test the end date of the invoice\", function () {",
									"        FormatEndDateActual = new Date(data.end).getTime(); ",
									"        FormatEndDateExpected = new Date(pm.variables.get(\"expected_end0\")).getTime(); ",
									"        pm.expect(FormatEndDateActual).to.be.eql(FormatEndDateExpected);",
									"    });",
									"",
									"    pm.test(\"Test amount to be payed for the invoice\", function () {",
									"        pm.expect(data.sum.toNumber().toFixed(2)).to.be.eql(pm.variables.get(\"expected_sum0\").toFixed(2));",
									"    });",
									"",
									"    pm.test(\"Test invoice count (number of calls made during the invoicing period)\", function () {",
									"        pm.expect(data.count.toString()).to.be.eql(pm.variables.get(\"expected_count0\").toString());",
									"    });",
									"}else{",
									"     for (var NumberOfInvoicesTemp = 0; NumberOfInvoicesTemp < pm.variables.get(\"numberOfInvoices\"); NumberOfInvoicesTemp++){",
									"        ",
									"            var expected_startNumberOfInvoicesTemp=\"expected_start\"+NumberOfInvoicesTemp;",
									"            var expected_endNumberOfInvoicesTemp=\"expected_end\"+NumberOfInvoicesTemp;",
									"            var expected_sumNumberOfInvoicesTemp=\"expected_sum\"+NumberOfInvoicesTemp;",
									"            var expected_countNumberOfInvoicesTemp=\"expected_count\"+NumberOfInvoicesTemp;",
									"            ",
									"            FormatStartDateActual = new Date(data.start).getTime(); ",
									"            FormatStartDateExpected = new Date(pm.variables.get(expected_startNumberOfInvoicesTemp)).getTime(); ",
									"            FormatEndDateActual = new Date(data.end).getTime(); ",
									"            FormatEndDateExpected = new Date(pm.variables.get(expected_endNumberOfInvoicesTemp)).getTime(); ",
									"            if((FormatStartDateActual === FormatStartDateExpected) & (FormatEndDateActual===FormatEndDateExpected)){",
									"                pm.test(\"Test invoice count (number of calls made during the invoicing period)\" , function () {",
									"                    pm.expect(data.count.toString()).to.be.eql(pm.variables.get(expected_countNumberOfInvoicesTemp).toString());",
									"                });",
									"                pm.test(\"Test amount to be payed for the invoice\", function () {",
									"                    pm.expect(data.sum.toNumber().toFixed(2)).to.be.eql(pm.variables.get(expected_sumNumberOfInvoicesTemp).toFixed(2));",
									"                });",
									"            }",
									"     }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/financial/invoice/{{invoice_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"financial",
								"invoice",
								"{{invoice_id}}"
							]
						},
						"description": "Get the first invoice"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d29626c2-d27d-45f6-a535-111cb8255c0b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1a09ceef-7f32-4e8f-8b52-15cd53621c8e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}